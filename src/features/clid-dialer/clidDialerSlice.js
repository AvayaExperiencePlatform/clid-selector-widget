import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  listPhoneNumbers,
  startVoiceCall,
  startConsultCall,
  startSingleStepTransferCall,
  getAgentDetails,
} from "./clidDialerAPI";

const initialState = {
  success: false,
  agent: null,
  phoneNumbers: null,
  agentState: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const listPhoneNumbersThunk = createAsyncThunk(
  "clidDialer/listAllNumbers",
  async () => {
    const allPhoneNumbers = [];
    try {
      let currentPhoneNumbers = await listPhoneNumbers({
        pageNumber: 1,
        pageSize: 50,
      });
      allPhoneNumbers.push(currentPhoneNumbers.phoneNumbers);
      const numberOfPagesLeft = Math.floor(
        currentPhoneNumbers.pagination.total /
          currentPhoneNumbers.pagination.pageSize
      );
      for await (const i of [...Array(numberOfPagesLeft).keys()]) {
        const currentPhoneNumbers = await listPhoneNumbers({
          pageNumber: i + 2,
          pageSize: 50,
        });
        allPhoneNumbers.push(currentPhoneNumbers.phoneNumbers);
      }
    } catch (error) {
      console.log(error)
    }
    return allPhoneNumbers.flat();
    // The value we return becomes the `fulfilled` action payload
  }
);

export const getAgentDetailsThunk = createAsyncThunk(
  "clidDialer/getAgentDetails",
  async () => {
    return await getAgentDetails();
    // The value we return becomes the `fulfilled` action payload
  }
);

export const startVoiceCallThunk = createAsyncThunk(
  "clidDialer/startVoiceCall",
  async ({ clid, target }) => {
    await startVoiceCall({ clid, target });
    // The value we return becomes the `fulfilled` action payload
    return true;
  }
);

export const startConsultCallThunk = createAsyncThunk(
  "clidDialer/consult",
  async ({ interactionId, clid, target }) => {
    await startConsultCall({ interactionId, clid, target });
    // The value we return becomes the `fulfilled` action payload
    return true;
  }
);

export const startSingleStepTransferCallThunk = createAsyncThunk(
  "clidDialer/singleStepTransfer",
  async ({ interactionId, clid, target }) => {
    await startSingleStepTransferCall({ interactionId, clid, target });
    // The value we return becomes the `fulfilled` action payload
    return true;
  }
);

export const clidDialerSlice = createSlice({
  name: "clidDialer",
  initialState,
  reducers: {
    setCurrentAgentState: (state, action) => {
      state.agentState = action.payload;
    },
  },
  // // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  //   increment: (state) => {
  //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
  //     // doesn't actually mutate the state because it uses the Immer library,
  //     // which detects changes to a "draft state" and produces a brand new
  //     // immutable state based off those changes
  //     state.value += 1;
  //   },
  //   decrement: (state) => {
  //     state.value -= 1;
  //   },
  //   // Use the PayloadAction type to declare the contents of `action.payload`
  //   incrementByAmount: (state, action) => {
  //     state.value += action.payload;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [startVoiceCallThunk.fulfilled]: (state) => {
      return { ...state, success: true };
    },
    [startVoiceCallThunk.rejected]: (state) => {
      return { ...state, success: false };
    },
    [startConsultCallThunk.fulfilled]: (state) => {
      return { ...state, success: true };
    },
    [startConsultCallThunk.rejected]: (state) => {
      return { ...state, success: false };
    },
    [startSingleStepTransferCallThunk.fulfilled]: (state) => {
      return { ...state, success: true };
    },
    [startSingleStepTransferCallThunk.rejected]: (state) => {
      return { ...state, success: false };
    },
    [listPhoneNumbersThunk.fulfilled]: (state, action) => {
      return { ...state, success: true, phoneNumbers: action.payload };
    },
    [listPhoneNumbersThunk.rejected]: (state) => {
      return { ...state, success: false };
    },
    [getAgentDetailsThunk.fulfilled]: (state, action) => {
      return { ...state, success: true, agent: action.payload };
    },
    [getAgentDetailsThunk.rejected]: (state) => {
      return { ...state, success: false };
    },
  },
});

export const { setCurrentAgentState } = clidDialerSlice.actions;
export default clidDialerSlice.reducer;
